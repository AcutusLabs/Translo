// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now()) @map(name: "created_at")
  updatedAt         DateTime @default(now()) @map(name: "updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map(name: "accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map(name: "sessions")
}

model User {
  id                     String    @id @default(cuid())
  name                   String?
  email                  String    @unique
  emailVerified          DateTime?
  emailVerificationToken String?
  password               String?   @map(name: "password")
  image                  String?
  tokens                 BigInt
  createdAt              DateTime  @default(now()) @map(name: "created_at")
  updatedAt              DateTime  @default(now()) @map(name: "updated_at")

  accounts Account[]
  sessions Session[]
  projects Project[]

  stripeCustomerId       String?             @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId   String?             @unique @map(name: "stripe_subscription_id")
  stripePriceId          String?             @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd DateTime?           @map(name: "stripe_current_period_end")
  AiTranslationsLog      AiTranslationsLog[]

  @@map(name: "users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map(name: "verification_tokens")
}

model Project {
  id        String   @id @default(cuid())
  title     String
  settings  Json?
  published Boolean  @default(false)
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  User      User?    @relation(fields: [userId], references: [id])
  userId    String?

  keywords  Keyword[]
  languages ProjectLanguage[]

  @@map(name: "projects")
}

model Keyword {
  id        String  @id @default(cuid())
  keyword   String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String
  context   String

  translations Translation[]

  @@unique([keyword, projectId])
  @@map(name: "keywords")
}

model ProjectLanguage {
  id        String  @id @default(cuid())
  short     String
  name      String
  Project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  projectId String

  translations Translation[]

  @@unique([short, projectId])
  @@map(name: "project_language")
}

model Translation {
  id                String          @id @default(cuid())
  Keyword           Keyword         @relation(fields: [keywordId], references: [id], onDelete: Cascade)
  keywordId         String
  ProjectLanguage   ProjectLanguage @relation(fields: [projectLanguageId], references: [id], onDelete: Cascade)
  projectLanguageId String
  value             String
  history           Json?

  @@unique([keywordId, projectLanguageId])
  @@map(name: "translations")
}

model AiTranslationsLog {
  id        String   @id @default(cuid())
  cost      Int
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")
  User      User     @relation(fields: [userId], references: [id])
  userId    String

  @@map(name: "ai_translations_log")
}
